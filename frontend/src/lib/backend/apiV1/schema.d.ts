/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api/v1/study/update/{studyContentId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put: operations["updateStudyContent"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/admin/study/{studyContentId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["getStudyContentById"];
    put: operations["updateStudyContent_1"];
    post?: never;
    delete: operations["deleteStudyContent"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/admin/interview/{interviewContentId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 특정 면접 질문 ID 조회
     * @description 면접 질문 ID를 이용하여 해당 데이터를 조회합니다.
     */
    get: operations["getInterviewContentById"];
    /**
     * 특정 면접 질문 수정
     * @description 면접 질문 ID를 기준으로 카테고리, 키워드, 질문, 모범 답안을 수정합니다.
     */
    put: operations["updateInterviewContent"];
    post?: never;
    /**
     * 특정 면접 질문 삭제
     * @description 면접 질문 ID를 기준으로 해당 질문과 모든 꼬리 질문을 삭제합니다.
     */
    delete: operations["deleteInterviewContent"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/member/role": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["changeRoleToAdmin"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/interview/random": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["randomContent"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/interview/keyword/content": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["keywordContentId"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/interview/bookmark": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["showBookmarkList"];
    put?: never;
    post: operations["bookmarkAdd"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/community/article/post": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["articlePost"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/studyMemo/create/{studyContentId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["createStudyMemo"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/interview/comment": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["getCommentsByMemberAndCategory"];
    put?: never;
    post: operations["createComment"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/interview/start": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["startInterview"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/interview/next": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["nextInterview"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/interview/evaluation": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["evaluateInterview"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/V1/chat": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["getAllChatRooms"];
    put?: never;
    post: operations["addChatRoom"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/studyMemo/{studyMemoId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete: operations["deleteStudyMemo"];
    options?: never;
    head?: never;
    patch: operations["updateStudyMemo"];
    trace?: never;
  };
  "/api/v1/interview/comment/{commentId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete: operations["deleteComment"];
    options?: never;
    head?: never;
    patch: operations["updateComment"];
    trace?: never;
  };
  "/member/{id}/isAdmin": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["isAdmin"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/member/me": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["me"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/interview/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["oneContent"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/interview/like": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["likeChange"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/interview/keyword": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["showKeywordList"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/interview/category/{category}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["categoryContentId"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/interview/all": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["allHeadContent"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/info": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["session"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/study": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["getFirstCategory"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/studyMemo": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["getStudyMemosByMemberAndCategory"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/studyMemo/{studyContentId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["getStudyMemoByMemberAndStudyContentId"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/study/{firstCategory}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["getSecondCategory"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/study/{firstCategory}/{secondCategory}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["getStudyContentByCategory"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/study/all": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["getAllCategory"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/interview/comment/public/{interviewContentId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["getPublicComments"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/interview/comment/my/{interviewContentId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["getMyComments"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/admin/study/category/{firstCategory}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["getPagedStudyContentsByFirstCategory"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/admin/study/category/{firstCategory}/{secondCategory}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["getPagedStudyContentsByCategories"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/admin/study/all": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["getAllCategory_1"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/admin/interview/{interviewContentId}/related": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 연관된 면접 질문 조회
     * @description 특정 면접 질문 ID를 기준으로 관련된 모든 꼬리 질문을 조회합니다.
     */
    get: operations["getRelatedInterviewContents"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/admin/interview/category/{category}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 특정 카테고리의 모든 질문 조회
     * @description 선택한 카테고리에 속하는 모든 면접 질문 데이터를 조회합니다.
     */
    get: operations["getInterviewsByCategory"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/admin/interview/category/{category}/{keyword}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 특정 카테고리의 키워드에 해당하는 모든 질문 조회
     * @description 선택한 카테고리 내에서 특정 키워드를 포함하는 면접 질문을 조회합니다.
     */
    get: operations["getInterviewsByCategoryAndKeyword"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/admin/interview/all": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 카테고리별 키워드 조회
     * @description 각 카테고리 내 키워드 목록을 조회합니다.
     */
    get: operations["getCategoryKeywords"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/V1/chat/{roomId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["getChatRoom"];
    put?: never;
    post?: never;
    delete: operations["deleteChatRoom"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["home"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/member/logout": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete: operations["logout"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/interview/bookmark/{noteId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete: operations["deleteNote"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/study/delete/{studyContentId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete: operations["deleteStudyContent_1"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    RsDataVoid: {
      code: string;
      msg: string;
      data: Record<string, never>;
    };
    StudyContentUpdateRequestDto: {
      title?: string;
      firstCategory?: string;
      secondCategory?: string;
      updateContent?: string;
    };
    InterviewContentAdminRequestDto: {
      /** Format: int64 */
      headId?: number;
      /** Format: int64 */
      tailId?: number;
      hasTail?: boolean;
      keyword?: string;
      /** @enum {string} */
      category?: "DATABASE" | "NETWORK" | "OperatingSystem" | "SPRING";
      question?: string;
      modelAnswer?: string;
      head?: boolean;
    };
    InterviewContentAdminResponseDto: {
      /** Format: int64 */
      id?: number;
      /** Format: int64 */
      headId?: number;
      /** Format: int64 */
      tailId?: number;
      hasTail?: boolean;
      keyword?: string;
      /** @enum {string} */
      category?: "DATABASE" | "NETWORK" | "OperatingSystem" | "SPRING";
      question?: string;
      modelAnswer?: string;
      /** Format: int64 */
      likeCount?: number;
      head?: boolean;
    };
    RsDataString: {
      code: string;
      msg: string;
      data: string;
    };
    RandomRequestDto: {
      indexList?: number[];
    };
    InterviewResponseDto: {
      /** Format: int64 */
      id?: number;
      /** Format: int64 */
      head_id?: number;
      /** Format: int64 */
      tail_id?: number;
      question?: string;
      model_answer?: string;
      category?: string;
      keyword?: string;
      /** Format: int64 */
      next_id?: number;
      /** Format: int64 */
      likeCount?: number;
      likedByUser?: boolean;
    };
    RandomResponseDto: {
      indexList?: number[];
      interviewResponseDto?: components["schemas"]["InterviewResponseDto"];
    };
    KeywordContentRequestDto: {
      keywordList?: string[];
    };
    AddPostRequestDto: {
      title?: string;
      content?: string;
    };
    CommentResponseDto: {
      /** Format: int64 */
      articleId?: number;
      commentAuthorName?: string;
      /** Format: date-time */
      commentTime?: string;
      comment?: string;
    };
    PostResponseDto: {
      /** Format: int64 */
      id?: number;
      authorName?: string;
      /** Format: date-time */
      postTime?: string;
      title?: string;
      content?: string;
      /** Format: int32 */
      like?: number;
      comments?: components["schemas"]["CommentResponseDto"][];
    };
    StudyMemoCreateRequestDto: {
      content?: string;
    };
    InterviewCommentRequestDto: {
      comment?: string;
      /** Format: int64 */
      interviewContentId?: number;
      isPublic?: boolean;
    };
    MyPageInterviewCommentResponseDto: {
      /** Format: int64 */
      commentId?: number;
      comment?: string;
      /** Format: int64 */
      interviewContentId?: number;
      interviewContentTitle?: string;
      category?: string;
      modelAnswer?: string;
      public?: boolean;
    };
    InterviewStartDto: {
      interviewType?: string;
    };
    InterviewNextDto: {
      answer?: string;
      interviewType?: string;
    };
    InterviewEvaluationDto: {
      conversation?: components["schemas"]["Message"][];
    };
    Message: {
      role?: string;
      content?: string;
    };
    ChatRoomRequestDto: {
      /** Format: int64 */
      roomId?: number;
      message?: string;
    };
    ChatRoomResponseDto: {
      /** Format: int64 */
      roomId?: number;
    };
    StudyMemoRequestDto: {
      /** Format: int64 */
      memoId?: number;
      memoContent?: string;
    };
    StudyMemoResponseDto: {
      /** Format: int64 */
      memoId?: number;
      memoContent?: string;
      /** Format: int64 */
      studyContentId?: number;
      firstCategory?: string;
      title?: string;
      body?: string;
    };
    RsDataBoolean: {
      code: string;
      msg: string;
      data: boolean;
    };
    MemberDto: {
      /** Format: int64 */
      id: number;
      nickname: string;
      profileImgUrl: string;
    };
    RsDataMemberDto: {
      code: string;
      msg: string;
      data: components["schemas"]["MemberDto"];
    };
    BookmarkResponseDto: {
      /** Format: int64 */
      contentId?: number;
      question?: string;
      answer?: string;
    };
    PageStudyContentDetailDto: {
      /** Format: int64 */
      totalElements?: number;
      /** Format: int32 */
      totalPages?: number;
      first?: boolean;
      last?: boolean;
      /** Format: int32 */
      numberOfElements?: number;
      pageable?: components["schemas"]["PageableObject"];
      /** Format: int32 */
      size?: number;
      content?: components["schemas"]["StudyContentDetailDto"][];
      /** Format: int32 */
      number?: number;
      sort?: components["schemas"]["SortObject"];
      empty?: boolean;
    };
    PageableObject: {
      paged?: boolean;
      /** Format: int32 */
      pageNumber?: number;
      /** Format: int32 */
      pageSize?: number;
      unpaged?: boolean;
      /** Format: int64 */
      offset?: number;
      sort?: components["schemas"]["SortObject"];
    };
    SortObject: {
      sorted?: boolean;
      unsorted?: boolean;
      empty?: boolean;
    };
    StudyContentDetailDto: {
      /** Format: int64 */
      id?: number;
      title?: string;
      body?: string;
      firstCategory?: string;
      secondCategory?: string;
    };
    InterviewCommentResponseDto: {
      /** Format: int64 */
      commentId?: number;
      comment?: string;
      /** Format: int64 */
      interviewContentId?: number;
      public?: boolean;
    };
    PageInterviewContentAdminResponseDto: {
      /** Format: int64 */
      totalElements?: number;
      /** Format: int32 */
      totalPages?: number;
      first?: boolean;
      last?: boolean;
      /** Format: int32 */
      numberOfElements?: number;
      pageable?: components["schemas"]["PageableObject"];
      /** Format: int32 */
      size?: number;
      content?: components["schemas"]["InterviewContentAdminResponseDto"][];
      /** Format: int32 */
      number?: number;
      sort?: components["schemas"]["SortObject"];
      empty?: boolean;
    };
    ChatMessage: {
      /** Format: int64 */
      id?: number;
      message?: string;
      /** Format: date-time */
      sendAt?: string;
    };
    ChatMessageResponseDto: {
      /** Format: int64 */
      roomId?: number;
      chatMessages?: components["schemas"]["ChatMessage"][];
    };
    Empty: Record<string, never>;
    RsDataEmpty: {
      code: string;
      msg: string;
      data: components["schemas"]["Empty"];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  updateStudyContent: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        studyContentId: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["StudyContentUpdateRequestDto"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": string;
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["RsDataVoid"];
        };
      };
    };
  };
  getStudyContentById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        studyContentId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["StudyContentDetailDto"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["RsDataVoid"];
        };
      };
    };
  };
  updateStudyContent_1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        studyContentId: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["StudyContentUpdateRequestDto"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": string;
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["RsDataVoid"];
        };
      };
    };
  };
  deleteStudyContent: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        studyContentId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": string;
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["RsDataVoid"];
        };
      };
    };
  };
  getInterviewContentById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /**
         * @description 조회할 면접 질문 ID
         * @example 1
         */
        interviewContentId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["InterviewContentAdminResponseDto"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["RsDataVoid"];
        };
      };
    };
  };
  updateInterviewContent: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        interviewContentId: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["InterviewContentAdminRequestDto"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["InterviewContentAdminResponseDto"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["RsDataVoid"];
        };
      };
    };
  };
  deleteInterviewContent: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        interviewContentId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["RsDataVoid"];
        };
      };
    };
  };
  changeRoleToAdmin: {
    parameters: {
      query: {
        id: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["RsDataString"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["RsDataVoid"];
        };
      };
    };
  };
  randomContent: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RandomRequestDto"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["RandomResponseDto"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["RsDataVoid"];
        };
      };
    };
  };
  keywordContentId: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["KeywordContentRequestDto"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": number[];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["RsDataVoid"];
        };
      };
    };
  };
  showBookmarkList: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["BookmarkResponseDto"][];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["RsDataVoid"];
        };
      };
    };
  };
  bookmarkAdd: {
    parameters: {
      query: {
        id: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": string;
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["RsDataVoid"];
        };
      };
    };
  };
  articlePost: {
    parameters: {
      query: {
        postRequestDto: components["schemas"]["AddPostRequestDto"];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["PostResponseDto"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["RsDataVoid"];
        };
      };
    };
  };
  createStudyMemo: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        studyContentId: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["StudyMemoCreateRequestDto"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": string;
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["RsDataVoid"];
        };
      };
    };
  };
  getCommentsByMemberAndCategory: {
    parameters: {
      query: {
        category: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["MyPageInterviewCommentResponseDto"][];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["RsDataVoid"];
        };
      };
    };
  };
  createComment: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["InterviewCommentRequestDto"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["MyPageInterviewCommentResponseDto"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["RsDataVoid"];
        };
      };
    };
  };
  startInterview: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["InterviewStartDto"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": string;
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["RsDataVoid"];
        };
      };
    };
  };
  nextInterview: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["InterviewNextDto"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": string;
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["RsDataVoid"];
        };
      };
    };
  };
  evaluateInterview: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["InterviewEvaluationDto"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": string;
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["RsDataVoid"];
        };
      };
    };
  };
  getAllChatRooms: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["ChatRoomResponseDto"][];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["RsDataVoid"];
        };
      };
    };
  };
  addChatRoom: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChatRoomRequestDto"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["ChatRoomResponseDto"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["RsDataVoid"];
        };
      };
    };
  };
  deleteStudyMemo: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        studyMemoId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": string;
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["RsDataVoid"];
        };
      };
    };
  };
  updateStudyMemo: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        studyMemoId: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["StudyMemoRequestDto"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["StudyMemoResponseDto"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["RsDataVoid"];
        };
      };
    };
  };
  deleteComment: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        commentId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": string;
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["RsDataVoid"];
        };
      };
    };
  };
  updateComment: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        commentId: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["InterviewCommentRequestDto"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["MyPageInterviewCommentResponseDto"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["RsDataVoid"];
        };
      };
    };
  };
  isAdmin: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["RsDataBoolean"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["RsDataVoid"];
        };
      };
    };
  };
  me: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["RsDataMemberDto"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["RsDataVoid"];
        };
      };
    };
  };
  oneContent: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["InterviewResponseDto"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["RsDataVoid"];
        };
      };
    };
  };
  likeChange: {
    parameters: {
      query: {
        id: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": string;
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["RsDataVoid"];
        };
      };
    };
  };
  showKeywordList: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": string[];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["RsDataVoid"];
        };
      };
    };
  };
  categoryContentId: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        category: "DATABASE" | "NETWORK" | "OperatingSystem" | "SPRING";
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": number[];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["RsDataVoid"];
        };
      };
    };
  };
  allHeadContent: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": number[];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["RsDataVoid"];
        };
      };
    };
  };
  session: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": {
            [key: string]: Record<string, never>;
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["RsDataVoid"];
        };
      };
    };
  };
  getFirstCategory: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": string[];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["RsDataVoid"];
        };
      };
    };
  };
  getStudyMemosByMemberAndCategory: {
    parameters: {
      query: {
        category: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["StudyMemoResponseDto"][];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["RsDataVoid"];
        };
      };
    };
  };
  getStudyMemoByMemberAndStudyContentId: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        studyContentId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["StudyMemoResponseDto"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["RsDataVoid"];
        };
      };
    };
  };
  getSecondCategory: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        firstCategory: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": string[];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["RsDataVoid"];
        };
      };
    };
  };
  getStudyContentByCategory: {
    parameters: {
      query?: {
        page?: number;
        size?: number;
      };
      header?: never;
      path: {
        firstCategory: string;
        secondCategory: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["PageStudyContentDetailDto"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["RsDataVoid"];
        };
      };
    };
  };
  getAllCategory: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": {
            [key: string]: string[];
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["RsDataVoid"];
        };
      };
    };
  };
  getPublicComments: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        interviewContentId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["InterviewCommentResponseDto"][];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["RsDataVoid"];
        };
      };
    };
  };
  getMyComments: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        interviewContentId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["InterviewCommentResponseDto"][];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["RsDataVoid"];
        };
      };
    };
  };
  getPagedStudyContentsByFirstCategory: {
    parameters: {
      query?: {
        page?: number;
        size?: number;
      };
      header?: never;
      path: {
        firstCategory: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["PageStudyContentDetailDto"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["RsDataVoid"];
        };
      };
    };
  };
  getPagedStudyContentsByCategories: {
    parameters: {
      query?: {
        page?: number;
        size?: number;
      };
      header?: never;
      path: {
        firstCategory: string;
        secondCategory: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["PageStudyContentDetailDto"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["RsDataVoid"];
        };
      };
    };
  };
  getAllCategory_1: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": {
            [key: string]: string[];
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["RsDataVoid"];
        };
      };
    };
  };
  getRelatedInterviewContents: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /**
         * @description 조회할 면접 질문 ID
         * @example 1
         */
        interviewContentId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["InterviewContentAdminResponseDto"][];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["RsDataVoid"];
        };
      };
    };
  };
  getInterviewsByCategory: {
    parameters: {
      query?: {
        page?: number;
        size?: number;
      };
      header?: never;
      path: {
        /**
         * @description 조회할 카테고리
         * @example DATABASE
         */
        category: "DATABASE" | "NETWORK" | "OperatingSystem" | "SPRING";
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["PageInterviewContentAdminResponseDto"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["RsDataVoid"];
        };
      };
    };
  };
  getInterviewsByCategoryAndKeyword: {
    parameters: {
      query?: {
        page?: number;
        size?: number;
      };
      header?: never;
      path: {
        /**
         * @description 조회할 카테고리
         * @example DATABASE
         */
        category: "DATABASE" | "NETWORK" | "OperatingSystem" | "SPRING";
        /**
         * @description 조회할 키워드
         * @example sequence
         */
        keyword: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["PageInterviewContentAdminResponseDto"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["RsDataVoid"];
        };
      };
    };
  };
  getCategoryKeywords: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": {
            [key: string]: string[];
          };
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["RsDataVoid"];
        };
      };
    };
  };
  getChatRoom: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        roomId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["ChatMessageResponseDto"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["RsDataVoid"];
        };
      };
    };
  };
  deleteChatRoom: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        roomId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": string;
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["RsDataVoid"];
        };
      };
    };
  };
  home: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "text/plain;charset=UTF-8": string;
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["RsDataVoid"];
        };
      };
    };
  };
  logout: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["RsDataEmpty"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["RsDataVoid"];
        };
      };
    };
  };
  deleteNote: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        noteId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": string;
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["RsDataVoid"];
        };
      };
    };
  };
  deleteStudyContent_1: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        studyContentId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": string;
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["RsDataVoid"];
        };
      };
    };
  };
}
