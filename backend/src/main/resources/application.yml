server:
  port: 8080

spring:
  jackson:
    serialization:
      fail-on-empty-beans: false

  output:
    ansi:
      enabled: always

  datasource:
    url: ${DB_URL}
    username: ${DB_USER}
    password: ${DB_PASSWORD}
    driver-class-name: com.mysql.cj.jdbc.Driver

  jpa:
    hibernate:
      ddl-auto: create
    show-sql: ${SHOW_SQL:false}
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
        format_sql: ${FORMAT_SQL:false}
        highlight_sql: ${HIGHLIGHT_SQL:false}
        use_sql_comments: ${USE_SQL_COMMENTS:false}
        default_batch_fetch_size: 10

  security:
    oauth2:
      client:
        registration:
          kakao:
            client-id: ${KAKAO_CLIENT_ID}
            scope: profile_nickname, profile_image
            client-name: Kakao
            authorization-grant-type: authorization_code
            redirect-uri: ${KAKAO_REDIRECT_URI}

        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id

  logging:
    level:
      org.hibernate.SQL: ${LOG_LEVEL_SQL:ERROR}
      org.hibernate.orm.jdbc.bind: ${LOG_LEVEL_BIND:ERROR}
      org.hibernate.orm.jdbc.extract: ${LOG_LEVEL_EXTRACT:ERROR}
      org.springframework.transaction.interceptor: ${LOG_LEVEL_TX:ERROR}

  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}

  mail:
    host: smtp.gmail.com
    port: 587
    username: ${MAIL_USER}
    password: ${MAIL_PASSWORD}
    properties:
      mail:
        smtp:
          auth: true
          debug: true
          starttls:
            enable: true

  thymeleaf:
    prefix: classpath:/templates/
    suffix: .html
    mode: HTML
    encoding: UTF-8
    cache: false



redisson:
  address: "redis://${REDIS_HOST:localhost}:${REDIS_PORT:6379}"

custom:
  jwt:
    secret-key: ${JWT_SECRET_KEY}
    expire-seconds: "#{60}"
    refresh-expire-seconds: "#{3600}"

springdoc:
  swagger-ui:
    requestInterceptor: >
      function(request) {
          request.credentials = 'include';
          return request;
      }

uri:
  frontend: https://chilldevprep.vercel.app
  backend: https://devapi.store

imp:
  code: ${IMP_CODE}
  key: ${IMP_API_KEY}
  secret_key: ${IMP_SECRET_KEY}

admin:
  email: ${ADMIN_EMAIL}

naver:
  key: ${NAVER_CLIENT_ID}
  secret: ${NAVER_CLIENT_SECRET}

publicData:
  key: ${PUBLIC_DATA_KEY}