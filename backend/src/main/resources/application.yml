server:
  port: 8080

spring:
  jackson:
    serialization:
      fail-on-empty-beans: false

  output:
    ansi:
      enabled: always

  profiles:
    active: dev

  datasource:
    url: ${db.url}
    username: ${db.username}
    password: ${db.password}
    driver-class-name: com.mysql.cj.jdbc.Driver

  config:
    import:
      - "classpath:application-secret.yml"
  jpa:
    hibernate:
      ddl-auto: create
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
        format_sql: true
        highlight_sql: true
        use_sql_comments: true
        default_batch_fetch_size: 10

  security:
      oauth2:
        client:
          registration:
            kakao:
              client-id: ${security.kakao.client-id}
              scope: profile_nickname, profile_image
              client-name: Kakao
              authorization-grant-type: authorization_code
              redirect-uri: http://localhost:8080/login/oauth2/code/kakao

          provider:
            kakao:
              authorization-uri: https://kauth.kakao.com/oauth/authorize
              token-uri: https://kauth.kakao.com/oauth/token
              user-info-uri: https://kapi.kakao.com/v2/user/me
              user-name-attribute: id
  logging:
    level:
      org.hibernate.SQL: DEBUG
      org.hibernate.orm.jdbc.bind: TRACE
      org.hibernate.orm.jdbc.extract: TRACE
      org.springframework.transaction.interceptor: TRACE

  data:
    redis:
      host: localhost
      port: 6379

redisson:
  # 단일 노드 Redis 환경 설정 (SSL이 필요한 경우 rediss:// 사용)
  address: "redis://localhost:6379"
  # 비밀번호가 필요한 경우 아래와 같이 설정
  # password: yourRedisPassword
  # 추가 설정 예시
  # connectionMinimumIdleSize: 10
  # connectionPoolSize: 64
custom:
  jwt:
    secret-key: ${security.jwt.secret-key}
    expire-seconds: "#{60}"
    refresh-expire-seconds: "#{3600}"

springdoc:
  swagger-ui:
    # swagger-ui에서 API 호출 시 쿠키를 전송하도록 하는 requestInterceptor 설정
    requestInterceptor: >
      function(request) {
          request.credentials = 'include';
          return request;
      }

imp:
  code: ${imp.code}
  key: ${imp.api-key}
  secret_key: ${imp.secret-key}
